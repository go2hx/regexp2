package _internal.github_dot_com.dlclark.regexp2_dot_test;
import _internal.github_dot_com.dlclark.regexp2.Regexp2;
import stdgo._internal.testing.internal.testdeps.Testdeps;
import stdgo._internal.testing.Testing;
function main():Void {
        var _m = stdgo._internal.testing.Testing_mainstart.mainStart(stdgo.Go.asInterface((new stdgo._internal.testing.internal.testdeps.Testdeps_testdeps.TestDeps() : stdgo._internal.testing.internal.testdeps.Testdeps_testdeps.TestDeps)), _internal.github_dot_com.dlclark.regexp2_dot_test.Regexp2_dot_test__tests._tests, _internal.github_dot_com.dlclark.regexp2_dot_test.Regexp2_dot_test__benchmarks._benchmarks, _internal.github_dot_com.dlclark.regexp2_dot_test.Regexp2_dot_test__fuzztargets._fuzzTargets, _internal.github_dot_com.dlclark.regexp2_dot_test.Regexp2_dot_test__examples._examples);
        #if (sys || hxnodejs) Sys.exit(@:check2r _m.run()) #else null #end;
    }
@:keep var __init_go2hx__ = {
        try {
            var __tmp__0 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__ecmaspace._ecmaSpace, __tmp__1 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__ecmaword._ecmaWord, __tmp__2 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__ecmadigit._ecmaDigit, __tmp__3 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__re2space._re2Space, __tmp__4 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_anyclass.anyClass, __tmp__5 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_ecmaanyclass.eCMAAnyClass, __tmp__6 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_noneclass.noneClass, __tmp__7 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_ecmawordclass.eCMAWordClass, __tmp__8 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_notecmawordclass.notECMAWordClass, __tmp__9 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_ecmaspaceclass.eCMASpaceClass, __tmp__10 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_notecmaspaceclass.notECMASpaceClass, __tmp__11 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_ecmadigitclass.eCMADigitClass, __tmp__12 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_notecmadigitclass.notECMADigitClass, __tmp__13 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_wordclass.wordClass, __tmp__14 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_notwordclass.notWordClass, __tmp__15 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_spaceclass.spaceClass, __tmp__16 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_notspaceclass.notSpaceClass, __tmp__17 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_digitclass.digitClass, __tmp__18 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_notdigitclass.notDigitClass, __tmp__19 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_re2spaceclass.rE2SpaceClass, __tmp__20 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_notre2spaceclass.notRE2SpaceClass, __tmp__21 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__unicodecategories._unicodeCategories, __tmp__22 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__lctable._lcTable, __tmp__23 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__codestr._codeStr, __tmp__24 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax___category.__category, __tmp__25 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax_errreplacementerror.errReplacementError, __tmp__26 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__typestr._typeStr, __tmp__27 = _internal.github_dot_com.dlclark.regexp2.syntax.Syntax__padspace._padSpace;
            var __tmp__0 = _internal.github_dot_com.dlclark.regexp2_dot_test.Regexp2_dot_test__tests._tests, __tmp__1 = _internal.github_dot_com.dlclark.regexp2_dot_test.Regexp2_dot_test__benchmarks._benchmarks, __tmp__2 = _internal.github_dot_com.dlclark.regexp2_dot_test.Regexp2_dot_test__fuzztargets._fuzzTargets, __tmp__3 = _internal.github_dot_com.dlclark.regexp2_dot_test.Regexp2_dot_test__examples._examples;
            stdgo._internal.testing.internal.testdeps.Testdeps_importpath.importPath = ("github.com/dlclark/regexp2" : stdgo.GoString);
        } catch(__exception__) if (__exception__.message != "__return__") throw __exception__;
        true;
    };
